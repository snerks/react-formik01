{"version":3,"sources":["basic.js","App.js","serviceWorker.js","index.js"],"names":["Basic","react_default","a","createElement","formik_esm","initialValues","email","password","validate","values","errors","test","onSubmit","_ref","setSubmitting","setTimeout","alert","JSON","stringify","_ref2","touched","handleChange","handleBlur","handleSubmit","isSubmitting","className","htmlFor","type","name","onChange","onBlur","value","disabled","App","style","padding","basic","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRA2FeA,EAxFD,kBACZC,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAAU,SAAAC,GACR,IAAIC,EAAS,GAQb,OAPKD,EAAOH,MAGT,2CAA2CK,KAAKF,EAAOH,SAExDI,EAAOJ,MAAQ,yBAJfI,EAAOJ,MAAQ,WAMVI,GAETE,SAAU,SAACH,EAADI,GAA+B,IAApBC,EAAoBD,EAApBC,cACnBC,WAAW,WACTC,MAAMC,KAAKC,UAAUT,EAAQ,KAAM,IACnCK,GAAc,IACb,OAGJ,SAAAK,GAAA,IACCV,EADDU,EACCV,OACAC,EAFDS,EAECT,OACAU,EAHDD,EAGCC,QACAC,EAJDF,EAICE,aACAC,EALDH,EAKCG,WACAC,EANDJ,EAMCI,aACAC,EAPDL,EAOCK,aAPD,OAUCvB,EAAAC,EAAAC,cAAA,QAAMS,SAAUW,GAUdtB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,cACbxB,EAAAC,EAAAC,cAAA,SAAOuB,QAAQ,SAAf,SACAzB,EAAAC,EAAAC,cAAA,SACEsB,UAAU,eACVE,KAAK,OACLC,KAAK,QACLC,SAAUR,EACVS,OAAQR,EACRS,MAAOtB,EAAOH,QAEfI,EAAOJ,OACNc,EAAQd,OACNL,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,sBAAsBf,EAAOJ,QAIlDL,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,cACbxB,EAAAC,EAAAC,cAAA,SAAOuB,QAAQ,YAAf,YACAzB,EAAAC,EAAAC,cAAA,SACEsB,UAAU,eACVE,KAAK,WACLC,KAAK,WACLC,SAAUR,EACVS,OAAQR,EACRS,MAAOtB,EAAOF,WAEfG,EAAOH,UACNa,EAAQb,UACNN,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,sBAAsBf,EAAOH,WAIlDN,EAAAC,EAAAC,cAAA,UACEsB,UAAU,kBACVE,KAAK,SACLK,SAAUR,GAHZ,eC9DKS,mLARX,OACEhC,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,kBAAkBS,MAAO,CAAEC,QAAS,KACjDlC,EAAAC,EAAAC,cAACiC,EAAD,cAJUC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.41505208.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Formik } from \"formik\";\r\n\r\nconst Basic = () => (\r\n  <div>\r\n    {/* <h1>Anywhere in your app!</h1> */}\r\n    <Formik\r\n      initialValues={{ email: \"\", password: \"\" }}\r\n      validate={values => {\r\n        let errors = {};\r\n        if (!values.email) {\r\n          errors.email = \"Required\";\r\n        } else if (\r\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        ) {\r\n          errors.email = \"Invalid email address\";\r\n        }\r\n        return errors;\r\n      }}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          alert(JSON.stringify(values, null, 2));\r\n          setSubmitting(false);\r\n        }, 400);\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting\r\n        /* and other goodies */\r\n      }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          {/* <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.email}\r\n          />\r\n          {errors.email && touched.email && errors.email} */}\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"email\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.email}\r\n            />\r\n            {errors.email &&\r\n              touched.email && (\r\n                <div className=\"alert alert-danger\">{errors.email}</div>\r\n              )}\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.password}\r\n            />\r\n            {errors.password &&\r\n              touched.password && (\r\n                <div className=\"alert alert-danger\">{errors.password}</div>\r\n              )}\r\n          </div>\r\n\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            type=\"submit\"\r\n            disabled={isSubmitting}\r\n          >\r\n            Submit\r\n          </button>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  </div>\r\n);\r\n\r\nexport default Basic;\r\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Basic from \"./basic\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid\" style={{ padding: 15 }}>\n        <Basic />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}